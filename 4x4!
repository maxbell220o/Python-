import RPi.GPIO as GPIO
import time

# Tastenfeld-Matrix (4x4)
KEYS = [
    ['1', '2', '3', 'A'],
    ['4', '5', '6', 'B'],
    ['7', '8', '9', 'C'],
    ['*', '0', '#', 'D']
]

# GPIO-Pins für Zeilen und Spalten
ROW_PINS = [5, 6, 13, 19]   # GPIO-Pins für Zeilen
COL_PINS = [12, 16, 20, 21]  # GPIO-Pins für Spalten

def setup():
    GPIO.setmode(GPIO.BCM)
    
    # Zeilen als Ausgänge setzen (Standard: HIGH)
    for row in ROW_PINS:
        GPIO.setup(row, GPIO.OUT)
        GPIO.output(row, GPIO.HIGH)

    # Spalten als Eingänge mit Pull-Up-Widerständen
    for col in COL_PINS:
        GPIO.setup(col, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def read_keypad():
    """Liest das Tastenfeld und gibt die gedrückte Taste zurück (oder None)"""
    for row_index, row in enumerate(ROW_PINS):
        GPIO.output(row, GPIO.LOW)  # Aktiviere eine Zeile
        for col_index, col in enumerate(COL_PINS):
            if GPIO.input(col) == GPIO.LOW:  # Wenn eine Taste gedrückt wurde
                time.sleep(0.1)  # Entprellzeit
                while GPIO.input(col) == GPIO.LOW:  # Warte, bis losgelassen wird
                    pass
                GPIO.output(row, GPIO.HIGH)  # Zeile zurücksetzen
                return KEYS[row_index][col_index]  # Taste zurückgeben
        GPIO.output(row, GPIO.HIGH)  # Zeile deaktivieren
    return None

def main():
    setup()
    print("Tastenfeld bereit! Drücke eine Taste.")
    try:
        while True:
            taste = read_keypad()
            if taste:
                print(f"Taste gedrückt: {taste}")
            time.sleep(0.1)  # Kleine Pause, um CPU-Last zu reduzieren
    except KeyboardInterrupt:
        print("\nProgramm beendet.")
        GPIO.cleanup()

if __name__ == "__main__":
    main()
